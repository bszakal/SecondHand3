//
//  UserProfileVM.swift
//  SecondHand3
//
//  Created by Benjamin Szakal on 12/11/22.
//

import SwiftUI

@MainActor
class UserProfileVM: ObservableObject {
    
    @Inject var getUserProfile: GetUserProfileProtocol
    @Inject var writeUserProfile: WriteUserProfileProtocol
    
    @Published private(set) var userProfile: UserProfile?
    
    var firstName: String {
        get{
            return userProfile?.firstName ?? ""
        } set {
            self.userProfile?.firstName = newValue
        }
    }
    
    var lastName: String {
        get{
            return userProfile?.lastName ?? ""
        } set {
            self.userProfile?.lastName = newValue
        }
    }
    
    var pseudo: String {
        get{
            return userProfile?.pseudo ?? ""
        } set {
            self.userProfile?.pseudo = newValue
        }
    }
    
    var emailAddress: String {
            return userProfile?.emailAddress ?? ""
    }
    
    var address: String {
        get{
            return userProfile?.address ?? ""
        } set {
            self.userProfile?.address = newValue
        }
    }
    
   var profilePicture = Data()
    
    
    func getUserProfileOrCreateNewOne() {
        Task {
            let resultUserProfile = await getUserProfile.getUserProfile()
            switch resultUserProfile {
            case .success(let userProfile):
                self.userProfile = userProfile
            case .failure(_):
                // if not user profile exists in database then get userID and email (automatically generated by Firebase when user registered) to start new profile
                let resultEmailAddress = await getUserProfile.getEmailAddress()
                switch resultEmailAddress {
                case .success(let emailAddress):
                    let resultUserID = await getUserProfile.getUserID()
                    switch resultUserID {
                    case .success(let userID):
                        self.userProfile = UserProfile(id: userID, emailAddress: emailAddress)
                    case .failure(_):
                        return
                    }
                case .failure(_):
                    return
                }
     
            }
        }
    }
    
    func getEmailAddress() async -> String {
        
            let resultEmailAddress = await getUserProfile.getEmailAddress()
            switch resultEmailAddress {
            case .success(let success):
                return success
            case .failure(_):
                return ""
            }
        
    }
    
    func isImageNew(photo: UIImage) async -> Bool {
        
            if let imgUrlStr = self.userProfile?.profilePictureUrlStr, imgUrlStr != "" {
                do{
                    let (data,_) = try await URLSession.shared.data(from: URL(string: imgUrlStr)!)
                    if data == photo.jpegData(compressionQuality: 0.8) {
                        return false
                    } else {
                        return true
                    }
                } catch {
                    print(error.localizedDescription)
                    return true
                }
            } else {
                return true
            }
    }
    
    func saveProfile(img: UIImage?) {
        Task{
            if let img = img {
                if await isImageNew(photo: img) {
                   await writeUserProfile.SaveProfile(profile: self.userProfile!, dataImg: img.jpegData(compressionQuality: 0.8))
                } else {
                    await writeUserProfile.SaveProfile(profile: self.userProfile!, dataImg: nil)
                }
            } else {
                await writeUserProfile.SaveProfile(profile: self.userProfile!, dataImg: nil)
            }
        }
    }
}
